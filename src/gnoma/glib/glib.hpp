///////////////////////////////////////////////////////////////////////
/// Copyright (c) 1988-2016 $organization$
///
/// This software is provided by the author and contributors ``as is'' 
/// and any express or implied warranties, including, but not limited to, 
/// the implied warranties of merchantability and fitness for a particular 
/// purpose are disclaimed. In no event shall the author or contributors 
/// be liable for any direct, indirect, incidental, special, exemplary, 
/// or consequential damages (including, but not limited to, procurement 
/// of substitute goods or services; loss of use, data, or profits; or 
/// business interruption) however caused and on any theory of liability, 
/// whether in contract, strict liability, or tort (including negligence 
/// or otherwise) arising in any way out of the use of this software, 
/// even if advised of the possibility of such damage.
///
///   File: glib.hpp
///
/// Author: $author$
///   Date: 5/7/2016
///////////////////////////////////////////////////////////////////////
#ifndef _GNOMA_GLIB_GLIB_HPP
#define _GNOMA_GLIB_GLIB_HPP

#include "gnoma/io/logger.hpp"
#include "gnoma/base/base.hpp"
#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>

#if !defined(G_POINTER)
#define G_POINTER(p) ((gpointer)(p))
#endif // !defined(G_POINTER)

namespace gnoma {

typedef xos::base::stringt<gchar> gstring;

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS gint_to_string: public string {
public:
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    gint_to_string(gint i) {
        this->append_signed(i);
    }
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
};

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS guint_to_string: public string {
public:
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    guint_to_string(guint i) {
        this->append_unsigned(i);
    }
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
};

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS gboolean_to_string: public string {
public:
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    gboolean_to_string(gboolean b) {
        this->append((b)?("TRUE"):("FALSE"));
    }
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
};

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS gpointer_to_string: public string {
public:
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    gpointer_to_string(gpointer p) {
        if ((p)) {
            this->append("0x");
            this->appendx(&p, sizeof(gpointer));
        } else {
            this->append("NULL");
        }
    }
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
};

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
class _EXPORT_CLASS gchars_to_string: public string {
public:
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
    gchars_to_string(const gchar* chars) {
        if ((chars)) {
            this->append("\"");
            this->append(chars);
            this->append("\"");
        } else {
            this->append("NULL");
        }
    }
    ///////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////
};

namespace glib {

} // namespace glib 
} // namespace gnoma 

#endif // _GNOMA_GLIB_GLIB_HPP 
